pipeline {
    agent any
    tools {
       maven 'maven'
    }
    environment{
        VERSION = "${env.BUILD_ID}"
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'master', description: 'Enter the Git branch name')
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Checking out ${params.BRANCH_NAME} branch..."
                    checkout([$class: 'GitSCM', 
                              branches: [[name: "*/${params.BRANCH_NAME}"]],
                              userRemoteConfigs: [[url: 'https://github.com/Shubhamalagur/spring-boot-war-example-parameter.git']]])
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    echo "Building ${params.BRANCH_NAME} branch..."
                    sh 'mvn clean install'
                }
            }
        }
        stage('Static Code Analysis') {
            environment {
            SONAR_URL = "http://34.125.47.253:9000"
            }
            steps {
                script {
                    //   withCredentials([string(credentialsId: 'sonarqube_id', variable: 'SONAR_AUTH_TOKEN')]) {
                        withSonarQubeEnv(credentialsId: 'sonarqube_id') {
                        sh 'mvn sonar:sonar'
                    }
                    timeout(time: 1, unit: 'HOURS') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Deploy to Artifactory') {
            environment {
                // Define the target repository in Artifactory
                TARGET_REPO = 'java-web-app'
            }
            
            steps {
                script {
                    try {
                        def server = Artifactory.newServer url: 'http://34.125.137.212:8082/artifactory', credentialsId: 'ARTIFACTORY_ACCESS_TOKEN'
                        def uploadSpec = """{
                            "files": [
                                {
                                    "pattern": "target/*.jar",
                                    "target": "${TARGET_REPO}/"
                                },
                                {
                                    "pattern": "target/*.war",
                                    "target": "${TARGET_REPO}/"
                                }
                            ]
                        }"""
                        server.upload(uploadSpec)
                    } catch (Exception e) {
                        error("Failed to deploy artifacts to Artifactory: ${e.message}")
                    }
                }
            }
        }
        stage("docker build & docker push"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'docker', variable: 'docker_password')]) {
                             sh '''
                                sudo chmod 777 /var/run/docker.sock
                                docker build -t shubham177501/helm-deploy:${VERSION} .
                                docker login -u shubham177501 -p $docker_password
                                docker push shubham177501/helm-deploy:${VERSION}
                                docker rmi shubham177501/helm-deploy:${VERSION}
                            '''
                    }
                }
            }
        }
        stage("image scanner by trivy"){
            steps{
                sh ' trivy image --format template --template "@/usr/local/share/trivy/templates/html.tpl" -o report.html shubham177501/helm-deploy:${VERSION} '
            }
        }
        stage('Deploying application on k8s cluster') {
            steps {
                script {
                    def targetEnv = ''
                    
                    if (params.BRANCH_NAME == 'master') {
                        targetEnv = 'prod'
                    } else if (params.BRANCH_NAME == 'dev') {
                        targetEnv = 'dev'
                    } else if (params.BRANCH_NAME == 'test') {
                        targetEnv = 'test'
                    }
                    if (targetEnv == 'prod') 
						{
						script{
                            timeout(10) {
                                mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> Go to build url and approve the deployment request <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "salagur6@gmail.com";  
                                input(message: "Deploy ${params.project_name}?", ok: 'Deploy')
                            }
                        }
                        script{
                            // withCredentials([kubeconfigFile(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG')]) {
		                    withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG')]) {
		                    dir('kubernetes/') {
                                    sh 'helm upgrade --install --set image.repository="shubham177501/helm-deploy" --set image.tag="${VERSION}" myjavaapp myapp/ --namespace ${targetEnv}' 
                                }
                            }
                        }
					}
                    else if (targetEnv == 'dev'){
                        script{
                            // withCredentials([kubeconfigFile(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG')]) {
		                    withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG')]) {
		                    dir('kubernetes/') {
                                    sh 'helm upgrade --install --set image.repository="shubham177501/helm-deploy" --set image.tag="${VERSION}" myjavaapp myapp/ --namespace ${targetEnv}' 
                                }
                            }
                        }
                    }
                    else if (targetEnv == 'test'){
                        script{
                            // withCredentials([kubeconfigFile(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG')]) {
		                    withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG')]) {
		                    dir('kubernetes/') {
                                    sh 'helm upgrade --install --set image.repository="shubham177501/helm-deploy" --set image.tag="${VERSION}" myjavaapp myapp/ --namespace ${targetEnv}' 
                                }
                            }
                        }
                    }
                }
            } 
        }
    }
}